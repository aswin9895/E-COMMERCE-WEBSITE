
        -------------------------------------------------
                HTML - Hyper Text Markup Languauge
        -------------------------------------------------

        1. Markup Languauge : 
        2. HTML - used to display contents in webpage
        3. HTML documents - collection of HTML Elements
            - HTML Elements : starting-tag,content,ending-tag
                - starting tag : content in <tag-name>
                - ending tag : 
                ex: <tag-name>content</tag-name>
            - Structure Of HTML
                <html>
                    <head>
                        <title> title </title>
                    </head>
                    <body>
                        contents to be displays in webpage
                    </body>
                </html>
        4. Latest Version of HTML : HTML5
        5. Basic Tags : used to display content in webpage
            - Headings : h1-h6 tags
            - paragraph - p tag
            - Text formatting tags
                - bold - b tag
                - Italics - i tag / em tag
                - highlight - mark tag
                - strikeout content - s tag
                - superlative content - sup tag
                - subscript content - sub tag
            - links - anchor / a tag
                - href : hyperReference Text ()
            - List
                - Ordered List - ol tag, li tag
                - Unordered list - ul tag, li tag
            - Table : table tag
                - thead tag : table head
                - tbody tag : table body
                - tr tag : row
                - th tag / td tag : column
            - img tag : image
                - src : source file
                - alt : alternative text
            - video tag
            - break : br tag
            - Containers tag 
                - div tag
                - section tag
                - article tag
            - iframe tag - EMbeding content in a webpage
            - form tag 
                - input tag : user can input data
                    - text, number, date, 
                - Check box
                - dropdown
                - Radio Button
                - Button
        6. Tags can be classified according to their display in browser
            - Block Elements : h1-h6 tag, p tag
            - Inline Elements : a tag
        7. Semantic Tags : describes its meaning  to both browser and developer
             - header tag
             - nav tag
             - section tag
             - article tag 
             - aside tag
             - footer tag

        -------------------------------------------------
                CSS - Cascading Style Sheet
        -------------------------------------------------

        1. used to give style to html elements
        2. Ways to apply CSS in html Elements
            - Inline CSS : use style attribute
                - syntax : style="property:value;"
            - Internal CSS : use style tag
                - syntax : <style>
                                selectors{
                                    property:value;
                                }
                           </style>
            - External CSS : use External css file, we have to link css file to html file
                - syntax :  selectors{
                                    property:value;
                                }
        3. CSS Selectors : used for selecting html elements to css file
            - tag name 
            - id 
            - class
            - Universal Selectors
            - CSS Combinators
                - Grouping selectors : using comma
                - Descendant selector : using space
                - Child selector : using >
                - Sibling Selectors : using ~
                - Immeadiate Sibling selector : using +
            - CSS Boxmodel
                - border
                - margin
                - padding
            - Css property
                - float : float elememts in left or right
                - position : control position of elememts in html
                    - static
                    - fixed
                    - relative
                    - absolute
                    - sticky
                - z-index
                - flexBox : used to arrange html elements in either row/column
                    - flex-container : parent tag which hold elements that to be arrangeed as row/column, apply flex to th parent
                    - flex-direction
                    - justify-content
                    - align-items
                - grid system : used to arrange html elements in either row/column, we can setup column/row width
                - Pseudo-class : define a special state of an element.
                    - syntax: selector:pseudo-class { property: value; }
                - background-image: linear-gradient(direction, color-stop1, color-stop2, ...);
                - animation in css
                    - animation property
                    - @keyframes : used to define animation
                - Animation Libraries
                    - animate style - https://animate.style/
                    - aos animation - https://michalsnik.github.io/aos/
                    - locomotive scroll - https://locomotivemtl.github.io/locomotive-scroll/
                - Responsive website design : website will fit in all type of devices
                    - media queries used in css to built Responsive website, it can access
                        - width and height of the viewport
                        - orientation of the viewport (landscape or portrait)
                        - resolution
                        - syntax : @media not|only mediatype and (media feature) and (media feature) {CSS-Code;}
  
        ----------------------------------------
                BOOTSTRAP - CSS FRAMEWORK
        ----------------------------------------

        1. FRAMEWORK : Its a collection of pre-defined data, that can be used by developers 
        2. Bootstrap : Build fast, responsive sites, uses predefined class of style
        3. To use Bootstrap in a webpage
            - link Bootstrap (https://getbootstrap.com/) with your webpage head tag
        4. Commonly used Bootstrap classes
            - container / container-fluid  class
            - m/mt/mb/ms/me-1/2/3/4/5 class
            - border border-color-name
            - primary/danger/success/warning/secondary/light/dark/info colors
            - p/pt/pb/ps/pe-1/2/3/4/5
            - bg-color
            - text-center/start/end
            - text-color-name
            - img-fluid
            - w-25/50/75/100
            - fs-1/2/3/4/5
            - fw-bolder
            - btn btn-color-name btn-outline-color
            - d-flex justify-content-evenly
            - grid
                - row used to arrange items in maximum of 12 division
                - col used to divide row 
            - Responsive breakpoints class : sm / md / lg / xl / xxl

        ----------------------------------------
                GIT & GITHUB 
        ----------------------------------------

        1. Git : used to as a software for version control
        2. Common GIT Commands
            - create git repository : git init
            - checking git status : git status
            - to add all untracked files : git add .
            - to save / commit to git : git commit -m "changes"
            - to link git with github repo : git remote add origin "https url of github repositiory"
            - to push git to github repository : git push origin master
            - to remove already existing origin from git : git remote remove origin

        -----------------------------------------------------------------------
                FIGMA - Online vector graphics editor and prototyping tool
        -----------------------------------------------------------------------

        --------------------------------------------------------------
                JAVASCRIPT - Dynamically Programmed Languauge 
        --------------------------------------------------------------

        1. Node js : Run time environment for JS outside the browser
            - Installing node js : 
            - checking node js version : node -v
            - execute js file using nodejs : node file-name.js
        2. Basic Concepts JS
            - Displaying contents : console.log(content)
            - to check type of a content : typeof
            - to join different type of data in js :
                - use comma to seperate
                - use + to join datas is 'concantenation'
                - Template literals : using back tick (`)
            - Data types in JS
                - Number
                - String : contents within a quotes
                - Boolean : true (1) /false (0)
                - undefined
                - object
            - Variables : used to store data
                - create Variables : 
                    - variablesName = value
                    - var variablesName
                    - const variablesName = value
                    - let variablesName
            - Identifiers : are rules to set up name for Variables
            - Hoisting : using a data before creating it
            - Difference between var, const and let Variables
                    var                         const                           let
                1. use var keyword          use const keyword               use let keyword
                2. can reassign value       connot reassign its value       can reassign value
                3. Global scope             Block scope                     Block scope
                4. Hoisted with value       Hoisted without assign value    Hoisted without assign value
            - Operators in JS
                - Assignment Operators : =
                - Arithmetic Operators : + - * / % ** return a number
                - Relational Operators : > < >= <= != == ===   return a Boolean
                - Logical Operators : && || ! return a Boolean
                            &&                  ||              !
                        T && T = T          T || T = T      !T = F
                        T && F = F          T || F = T      !F = T
                        F && T = F          F || T = T
                        F && F = F          F || F = F
                - Increment / Decrement Operators : ++ --
                - ShortHand Operators : += -= *= /=
                - Ternery Operators : condition?statement when condition become true:statement when condition become false
                - Truthy Operators : condition&&statement when condition become true
                - Spread operator : used to expand iterating variables to a single iterating variable, operator : ...
                - Rest operator : used to combine rest of the value to an array ,operator : ...
            - Conditional Statements
                - if Statements : 
                    - syntax : if(condition){ if body executes when condition become true }
                - if-else Statements
                    - syntax : if(condition){ if body executes when condition become true }else{
                        else body executes when condition become false
                    }
                - else if ladders
                - switch statements :
                    - syntax : 
            - Looping statements : Same task should repeat multiple times
                - while loop :
                    - syntax : 
                        1. Initialise a variable
                        2. while(condition should use variable that Initialised){
                            task to be repeated when condition become true
                            3. Change the value of condition variable inside loop
                        }
                - for loop : 
                    - syntax : for(Initialise a variable;condition should use variable that Initialised;Change the value of condition variable){
                        task to be repeated when condition become true
                    }
                    - break statement : used to exit from  a loop
                    - continue statement : used to skip certain values in a loop
                - Nested loop : A loop inside another loop
                    - outerloop{
                        innerloop{
                            innerloop execution complete first
                        }
                    }
            - Functions : used to perform specific task
                - Functions Definition : Defining task to be performed
                    - syntax : function function-name(arg1,...agrn){
                        function body - here we have to define task
                    }
                - Function Call : to execute function we have to Call
                    - syntax : function-name(p1,..pn)
                - return statements
                - Types of Functions
                    - Arrow Functions : alternative of normal function Definition
                        - syntax : var/let/const function-name = (arg1,...agrn)=>{ function body - here we have to define task }
                    - Predefined Functions : console.log(),eval()
                    - CallBack function : A function Definition inside another function call
                    - Anonymous function : nameless function / self executing functions
                    - Recursive function : Calling the Function inside its own Definition
                    - Nested functions : A function Definition inside another function Definition
                        - Closure property in JS : In nested function, child function can access both its own variable as well as its parent variable
                    - Currying function : used to transform the function of multiple argument into several functions of single argument
                    - Higher Order Function : function that accept another function as an argument and return a function as a result
            - Array : used to store multiple values in a single variable
                - Array Methods
                    - push(item) : insert item at the end of an Array
                    - unshift(item) : insert item at the starting of an Array
                    - pop() : remove item at the end of an Array
                    - shift() : remove item from starting of array
                    - sort(callback) : used to sort an array in ascending/descending order
                    - forEach(callback) : alternative of for-of loop, to iterate an array and it wont return anything
                    - map(callback) : return a new array with values after applying a mapping function to an existing array
                    - filter(callback) : return a new array with items satisfying condition applied to the existing array
                    - find(callback) : return a single value which satisfying condition applied to the existing array
                    - reduce(callback) : return a single value (largest/smallest/total sum) after applying reduce function to an existing array
                    - reduceRight(callback) : return the first  value (largest/smallest) after applying reduce function to an existing array
                    - some(callback) : return a boolean value after applying a condition to an existing array, it will true if one of item satisfy the given condition
                    - every(callback) : return a boolean value after applying a condition to an existing array, it will true if all the items satisfy the given condition
                    - flat(depth) : used to reduce dimension of an array, if depth is 'Infinity' then flat Method always return a single dimension array
                    - includes(key) : used to return a boolean value based on key present in the array or not
                    - reverse() : used to reverse items in an array 
                    - indexOf() : return index of a data present in the array
                    - join(seperator) : return a string seperated with seperator while joining all array items
                    - slice(start,end) : used to display part of an array
                    - splice(starting index,delete count) : used to remove / replace items from an array
                    - concat(stringArray) : used to join two array to single array
            - String : collection of characters and enclosed in either single or double quotes
                - String Methods
                    - substring()
                    - slice()
                    - toUpperCase()
                    - toLowerCase()
                    - startsWith()
                    - trim()
                    - includes()
            - Object : used to store multiple values, store data as key:value pair,
                - create an obejct : {key:value} 
                - to access values from an object :
                    - use Barcket notation : object-name["key"]
                    - use Dot notation : object-name.key
                - check a key is present in an object :
                    - operator 'in ' :"key" in object-name ,  it return boolean
                    - hasOwnProperty() : object-name.hasOwnProperty(key) it return boolean
                - insert data to an object 
                    - object-name["key"] = value / object-name.key = value
                    - Object.assign(target-object,source)
                - update value of an existing object
                - Object.keys(object-name) : display all keys in an object
                - Object.values(object-name) : display all values in an object
                - Object.entries(object-name) : used to convert object to an array
                - delete keyword (delete object-name.key) : to delete key-value from an object 
                - Object Destructuring : const {key1,key2...keyn} = object-name
            - Handling Runtime errors in JS
                - Try-Catch-finally Block
            - OOP : Object Oriented Programming
                - class : blueprint of object, use class keyword to create class in js
                - object : real world entity, to access class featires outside the class create object
                    - syntax : objectName = new className()
                - reference : used to link class with its properties, use this keyword to link class properties and function with class
                - OOPs Features
                    - Inheritance 
                        - Classical Inheritance : use extends keyword
                        - Prototype Inheritance : use __proto__ keyword
                    - Polymorphism 
                    - Abstraction : Hiding the important data from user
                    - Encapsulation : Data inside another data
            - Modules in JAVASCRIPT : used to communicate data from one js file to another
                - 'export' / 'export default' keyword : used to export data/function from a js file
                - import keyword : to access the content exported from a js file

        --------------------------------------------------------------
                JAVASCRIPT - SCRIPTING Languauge
        --------------------------------------------------------------
        1. Provide Behavior to HTML elememts
        2. Applying JS in webpage
            - Internal JS : using script tag to defining 'js code' in html
            - External JS : using script tag to link External js to html page
        3. DOM : Document Object Model, which is tree representation of a webpage, every tree must has a single parent node, js can access DOM using 'document' object
        4. DOM Methods : Selecting HTML elememts to JS
            - use tag name : document.getElementByTagName('tagName')
            - use id name : document.getElementById('id') / id
            - use class name : document.getElementByClassName('className')
            - use querySelector : document.querySelector('#id/.className/tag')
            - use querySelectorAll : document.querySelectorAll('#id/.className/tag')
        5. HTML Events : Mouse related events, Keyboard related events , Touch related events
            - user will trigger events to change the behavior of a web page
        6. Binding Events : eventName = function-name(), define the behavior in a function and call the function when an event is occur in a html element
        7. Access/updating content of an HTML elememt 
            - innerHTML
            - innerText
        8. Permanent Storage in browser
            - Local Storage : data stored as key and value pair, but here both key and value type must be 'string'
                - setItem(key,value) : data will stored in local Storage
                - getItem(key) : to get datas stored in local Storage
                - removeItem(key) : to remove data
            - Session Storage
        9. API (Application Programming Interface) : used to communicate different Application in internet
            - REST (Representational State Transfer) API : uses client-server app , HTTP request, pass different types of data (JSON,XML,binary....) via its body
            - URL : Uniform Resource Locator - ex: https://jsonplaceholder.typicode.com/users/1
                - base url : ex : https://jsonplaceholder.typicode.com
                - URI : Uniform Resource Identifier - ex: https://jsonplaceholder.typicode.com/users
                - path Parameter : ex: 1
                - query parameter : content after ?, ex:  https://in.search.yahoo.com/search?fr=mcafee&type=E211IN1274G0&p=mercury
                - body parameter
            - HTTP (Hyper Text Transfer Protocol)
                - HTTP Request : 2 parts, Header part, body part. data to be shared stored in body part
                    - GET : used to read / get data from another app
                    - POST : used to create data in an app
                    - PUT : used to update entire data already in their app
                    - PATCH : used to update partial data already in their app
                    - DELETE : used to remove a data from an app
                - HTTP Response, status code
                    - 1xx : Informational
                    - 2xx : Success
                    - 3xx : Redirection
                    - 4xx : Client errors
                    - 5xx : Server errors
            - JSON : JAVASCRIPT Object notation, data stired as key value pair, but type of key must be string, {"key":value}, is the format data to be transfer within internet
        10. Handling functions in JS : 'Single threaded Programming Languauge' beacause it has only 'one call stack' to resolve functions
            - Synchronous Functions : execute without any time delay
            - Asynchronus functions : excutes after a time delay, js uses event loop to resolve Asynchronus Functions
                - Handling Asynchronus function in JS
                    - Callback : it leads callback hell (Nesting callback functions)
                    - promise : used to resolve Asynchronus function
                        - every promise has 2 states
                            - resolved state : whenever we get a response for a Request, to access response from resolved state, promise uses 'then' method, syntax : then(callback) response will be in the call back
                            - reject state : if user doesnot get any response for its request, to access reject state, use promise 'catch' method, syntax : catch(callback), reason to reject request will be in the callback
                        - Async - Await keyword : Resolve 'promise' without using callback, we can use async keyword only in a function definition , to get response from a promise use await keyword, 
                - Different type of Asynchronus function in JS
                    - Callback functions : may lead to callback hell (Nesting of callback function)
                    - API Calls : Handling api call (AJAX : Asynchronus JAVASCRIPT XML , using js make api call)
                        - using XMLHttpRequest class
                            - 1. create object for xmlhttprequest class
                            - 2. open a connection to url
                            - 3. send get request to url
                        - using fetch method : based on promise
                        - using axios library : based on promise
        
        --------------------------------------------------------------
                REACT - FRONT END TECHNOLOGY : JS LIBRARY
        --------------------------------------------------------------

        1. React Basic Concepts
            - React App used to build a Single page Application
            - React App is a collection of components, compoenents used to display content in browser, all compoenents are arranged as a tree Structure in react app, root node / root compoenent of react app will always 'App' Component
            - Pure Function : used to build components, which doesnot cause side effects
            - Declarative Approach 
            - Virtual DOM :  Light weight representation of Real DOM , it helps faster loading of contents in app
            - Babel library : Transiple JSX code to simple react functions which is understood by browser
            - JSX (JAVASCRIPT XML - JAVASCRIPT extension for HTML code) used to display contents in browser
                - JSX Elements : const heading = <h1>Heading </h1>
                - Rules of JSX Code
                    - Every JSX Elements must be in a parent/container tag, this container tag can be div/section/article... or React Fragment (tag without name) <></> 
                    - Every JSX element must have an ending/closing tag, <tag-name>content</tag-name>, <tag-name/> (self closing tag : used to represent tag without content)
                    - JSX follow camel case (if a word has 2 words then second word first letter must be in capital case - font-size : fontSize )
                    - Instead of using attribute 'class' use 'className'
                    - Instead of using attribute 'for' use 'htmlFor'
                    - Use JS code directly in JSX, use {} to provide js code in JSX , ex: {js code}
        2. React App Creation
            - CRA (using create-react-app Command)
            - Vite : Is a web project building tool
                - install vite globally : npm i -g create-vite
                - react app using vite : npm create vite@latest reactAppName -- --template react
                - to run react app using vite : npm run dev
                - to get build folder to deploy : npm run build, use dist folder for deployemnet
        3. Files & Folder Structure of React app using Vite
            - package.json file : npm Configuration file
            - package-lock.json file : used to store version history of packages used in the project
            - .gitignore file : used to mention data to be ignored while adding to git
            - eslint.config.js file : js configuaration
            - index.html : entry point, its body must container a div with id as root, include main.jsx file using script
            - node_modules folder : used to store external package dependencies in local project (if you have 'package.json file' the to generate node_module use command : 'npm install')
            - public folder : data inisde public folder available globally in project
            - src folder : source folder , define logic of react app here
                - main.jsx file : createRoot used to render react app in DOM element with id as root
                - index.css / App.css files : used to style jsx elements
                - App.jsx file : root compoenent of react app
                - assets folder : used to store media files used in our react app
        4. Components in React : used to display contents in browser
            - To create a Component in react : 2 Ways, create js/jsx file, and its filename must be start with capital letter
                - Functional (/ Stateless)  Based Components : use js pure function with its name same as its file and function must return jsx code
                - Class Based Components / statefull compoenent : 
            - Difference between class vs function based compoenent
                Class Based compoenent                              Functional Based compoenent
            -----------------------------------------        --------------------------------------------
            1. Using js Class inherit from react                1. using js pure function and return jsx 
            compoenent, and render JSX
            2. compoenent will live depending on different      2. It executes from top to bottom, once it
            lifecycle Methods                                   returns, it cannot be alive
            3. Statefull compoenent                             3. Stateless compoenent
            4. Do not use Hooks                                 4. Hooks are used
            5. Lifecycle methods available                      5. Lifecycle methods are not available
            6. Uses render method to display JSX into DOM       6. No need to use render method
            7. Use constructor to initialise state              7. NO need to use constructor
        5. Data Shairing in React App
            - Parent to Child Data Shairing : child can access data from parent using 'props'
        6. Props in React : props mean property of a components, and props will be arguments of that components, and it        type   is object, used to transfer data from parent to child
        7. Conditional Rendering : based on a condition display jsx elememts into browser, use if (&&) , if-else (?:) these operator to render jsx into browser
        8. CSS Styling in  React :
            - Inline CSS in jsx: using style attribute , can pass style as an object, style={{property:value}}
            - External CSS in jsx : define css style in an external file and to apply style we have to import css file in compoenent
                - import 'css-file-path'
            - CSS Module file : use extension .module.css file, here it can import to a variable in a compoenent, define style using class in module css file
        9. Events Handling in React : according to each event jsx elememt has bind/call a function
            - Calling Function without arguments : event={functionName}
            - Calling Function with arguments : event={()=>functionName(arg1,..)}
            - Calling Function with argument as event : event={(event)=>functionName(event)}
        10. Array in React JSX : use 'map' method to display array in JSX, to uniquely identify each item use 'key' props 
        11. State - used to store values in a compoenent, whenever state changes then compoenent will re rednder
            - to update state : use setState(value)
        12. Lifecycle Methods of React Component
            - Mounting Phase : putting compoenent into DOM
                - constructor()
                - getDerivedStateFromProps()
                - render()
                - componentDidMount()
            - Updating phase : When compoenent updating
                - getDerivedStateFromProps()
                - shouldComponentUpdate()
                - render()
                - getSnapshotBeforeUpdate()
                - componentDidUpdate()
            - Unmounting phase : Removing compoenent from DOM
                - componentWillUnmount()
        13. React Hooks : used to provide react compoenent features to Functional based compoenent, they are predefined functions, that function name must start with 'use' keyword, to use hooks in functional compoenent must call it
            - Rule to use hook in Functional compoenent
                - Import Hook from react in compoenent
                - Call hooks in top level of a Component
                - Hooks cannot be Conditional
            - Types of Hooks
                - Predefined Hooks
                    - useState(intial-value) : used to create state in functional compoenent, it will return state value, function name to update state value and stored in an array
                    - useEffect(side effect function,dependency) : used to provide side effcects to the compoenent
                        - side effect function : used to define which side effects to be applied in compoenent
                        - dependency : used to control when useEffect hook must call in a compoenent
                            - no dependency : useEffect hook will call the time in compoenent (it become an infinite loop)
                            - [] : useEffect hook will call only at time of compoenent Creation
                            - [state/props/variable] : useEffect hook will call  at time of compoenent Creation as well as channges in the value state/props/variable passed in the dependency
                    - useParams() : hook used to access path parameter from a url associated with component, return an object.
                - Custom Hooks : userdefined hooks
                    - Create a function with a name starts with 'use'
        14. External Styling React Component Libraries
            - Material UI :  npm install @mui/material @emotion/react @emotion/styled
            - React Bootstrap : npm install react-bootstrap bootstrap , include a bootstrap theme (https://bootswatch.com/) to react app. download bootstrap.min.css theme file and add to src folder. import file bootstrap.min.css into main.jsx file
            - Tailwind CSS : 
        15. Handling Forms in React : react can Handle forms in 2 Ways
            - Controlled Component : In a compoenent , form data is managed by compoenent state
            - Uncontrolled Component : form data is managed by DOM refernce in a compoenent, to get reference use useRef Hook in react
        16. Set up path for compoenent in React : use package - react-router-dom
                - install react-router-dom : npm i react-router-dom
                - Steps to set up path for compoenent
                    - Render react app inside 'BrowserRouter' compoenent from react-router-dom library
                    - compoenent need to setup path must be render inside 'Routes' compoenent of react-router-dom inside App.jsx
                    - to define path, we have to 'Route' compoenent and use key as 'path' to define path and 'element' key to display the compoenent
                - Link component : used to redirect from one page to another without reloading current page
        17. API Call in React : Using Axios library which return promise
            - Install axios : npm i axios
            - create a folder in src for making all api call
        18. Data Shairing between compoenent in React
            - Using Props : State Lifting - Is a data Shairing mechanism in react app, where state to be shared must be lifted to their common parent, then parent will share the state updating function to the component who wanted to share data and parent share state to the component who need the data
        
        --------------------------------------------------------------
                JSON SERVER CREATION
        --------------------------------------------------------------

        1. create a folder to store json file
        2. create package.json (npm configuration file) file inside server folder : npm init -y
        3. install json-server package to run a json file : npm i json-server / npm i json-server@0.17.4
        4. create db.json file inside server folder to store json data from front end Application
        5. to run json file and see output in http://localhost:3000/: npx json-server db.json / node index.js

        --------------------------------------------------------------
              DEPLOYING A JSON FILE USING NODE
        --------------------------------------------------------------

        1. create index.js file in server folder
        2. update the script for starting command  as "start: "node index.js" in servere package.json file
        3. update json-server version to a stable one if it is a unstable version like alpha / beta version
        4. create .gitignore file in order add node_modules folder 
        5. Define json-server to run json file in index.js file
            - import json-server in index.js file
            - create server for running json file for that use create() from json-server package
            - create route for json file
            - create middleware to conver data
            - set up port for running Application
            - use middleware and route in json server app
            - host/ listen json app using port

        --------------------------------------------------------------
              REDUX - STATE MANAGEMENT LIBRARY
        --------------------------------------------------------------

        1. A JS library for predictable and maintainable global state management
        2. It consist of 2 Libraries : npm install @reduxjs/toolkit react-redux
            - React-Redux : Official React bindings for Redux
            - Redux-Toolkit : The official, opinionated, batteries-included toolset for efficient Redux development
        3. Important API in Redux
            - configureStore() : used to create store. create a js file and call configureStore method, 
                - To provide store to react app, use Provider compoenent and pass our store to its property 'store' in main.jsx
            - createSlice() : used to combine bith action (logic to update state) and reducer (updated state that is output action), accepts an object of reducer functions, a slice name, and an initial state value, and automatically generates a slice reducer with corresponding action creators and action types.
            - createAsyncThunk() : used to make api call using action. will return promise, we can resolve promise in three ways as pending/fullfilled/rejected. We can pass 3 arguments to this action, a string action type value, a payloadCreator callback, and an option object. to define action type string use 'slice-name/action-name'. Inside payloadCreator callback call api Calls.
                - extraReducers of slice is used to resolve promise based action. every extraReducers has builder object. using builder object reducer can add different cases of promise
        4. Hooks used in compoenent while Handling state using Redux
            - useSelector(state=>) : used to select state from store in compoenent
            - useDispatch() : return a function capable of dispatching/executing action from a component
                - Dispatching action without argument : 
                - Dispatching action with argument : to get data shared by compoenent in reducer function , use reducer function second argument object its payload key will have data from action argument












        